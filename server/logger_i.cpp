// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /opt/ACE_wrappers/TAO/TAO_IDL/be/be_codegen.cpp:1621

#include "loggerI.h"
#include <iostream>
#include <sstream>
#include <ctime>


// Implementation skeleton constructor
LoggerServer_Logger_i::LoggerServer_Logger_i ()
  : verbose_(true)
{
}

// Implementation skeleton destructor
LoggerServer_Logger_i::~LoggerServer_Logger_i ()
{
}

::CORBA::Boolean LoggerServer_Logger_i::verbose ()
{
  std::lock_guard<std::mutex> lk(mtx_);
  return verbose_;
}

void LoggerServer_Logger_i::verbose (
  ::CORBA::Boolean verbose)
{
  std::lock_guard<std::mutex> lk(mtx_);
  verbose_ = verbose;
}

void LoggerServer_Logger_i::log (
  ::LoggerServer::Severidade severidade,
  const std::string endereco,
  const std::string pid,
  const std::string hora,
  const std::string msg)
{
  std::lock_guard<std::mutex> lk(mtx_);
 
  std::ostringstream oss;
 
  const char* sev_str = "UNKNOWN";
  switch (severidade) {
    case LoggerServer::DEBUG:    sev_str = "DEBUG"; break;
    case LoggerServer::WARNING:  sev_str = "WARNING"; break;
    case LoggerServer::ERROR:    sev_str = "ERROR"; break;
    case LoggerServer::CRITICAL: sev_str = "CRITICAL"; break;
  }
 
  oss << "[" << hora << "] ";
  oss << "(" << sev_str << ") ";
  oss << endereco << " pid=" << pid << " - " << msg;
 
  std::string line = oss.str();
 
  records_.push_back(line);
 
  if (verbose_) {
    std::cout << line << std::endl;
  }
}
